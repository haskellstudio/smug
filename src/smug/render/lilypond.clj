(ns smug.render.lilypond
  (:require [smug.render.model :refer :all]
            [clojure.java.shell :refer [sh]]
            [clojure.java.io :as io]))

(defmulti render-element (fn [[element-type]] element-type))

(defmethod render-element :note
  [[_ pitch duration]]
  (str
   (let [n (name pitch)
         lower (clojure.string/lower-case n)]
     (if (= lower n)
       (str lower "'")
       lower))
   (if (ratio? duration)
     (denominator duration)
     duration)))

(defmethod render-element :bar-line
  [[_ line-type]]
  (condp = line-type
    :end    "\\bar \"|.\""
    :single "\\bar \"|\""))

(defmethod render-element :end-of-staff-line
  [_]
  "\\break \n  ")

(defn render-as-lilypond [score]
  (let [elements (score->elements score)
        rendered-elements (clojure.string/join " " (map render-element elements))]
    (str "
\\header {
  title = \"Sight Reading Exercise\"
  tagline = \"Generated by SMUG\"
}
{\n  "
         rendered-elements
         "\n}")))

(defn render-svg-to [score path]
  (let [document (render-as-lilypond score)
        f (io/file path)
        dir (.getParent f)
        name (clojure.string/replace (.getName f) ".svg$" "")
        lilypond-output (io/file dir name)
        output-file (io/file dir (str name ".svg"))]
    (let [{:keys [exit out err]} (sh "lilypond"
                                     "-dbackend=svg"
                                     (str "--output=" lilypond-output)
                                     "-"
                                     :in document)]
      (if (or (= exit 0) (not (.exists f)))
        output-file
        (throw (ex-info "Failed to render score using Lilypond"
                        {:stdout out
                         :stderr err}))))))
